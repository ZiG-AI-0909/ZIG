{
  "name": "Telegram Voice Lead Generator with Google Sheets",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "e3b5f6a7-8c9d-4f2e-b1a3-6d8e9f0a1b2c",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "telegram-voice-bot"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.message.voice ? true : false}}",
              "value2": true
            }
          ]
        }
      },
      "id": "a4c7d8e9-1b2f-3a4e-5c6d-7e8f9a0b1c2d",
      "name": "Check Voice Message",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{$credentials.telegramApi.accessToken}}/getFile?file_id={{$json.message.voice.file_id}}",
        "responseFormat": "json",
        "options": {}
      },
      "id": "b5d8e9f0-2c3a-4b5f-6d7e-8f9a0b1c2d3e",
      "name": "Get File Info",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [650, 200]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/file/bot{{$credentials.telegramApi.accessToken}}/{{$json.result.file_path}}",
        "responseFormat": "file",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "c6e9f0a1-3d4b-5c6a-7e8f-9a0b1c2d3e4f",
      "name": "Download Voice File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 200]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "modelId": "whisper-1",
        "options": {}
      },
      "id": "d7f0a1b2-4e5c-6d7b-8f9a-0b1c2d3e4f5a",
      "name": "OpenAI Transcribe",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract locations from transcribed text\nconst transcribedText = $input.first().json.text || '';\nconst chatId = $node[\"Telegram Trigger\"].json.message.chat.id;\nconst locations = [];\n\n// Define location mappings\nconst locationMap = {\n  'uk': 'United Kingdom',\n  'united kingdom': 'United Kingdom',\n  'britain': 'United Kingdom',\n  'us': 'United States',\n  'usa': 'United States',\n  'united states': 'United States',\n  'america': 'United States',\n  'canada': 'Canada'\n};\n\n// Extract locations\nconst lowerText = transcribedText.toLowerCase();\nfor (const [key, value] of Object.entries(locationMap)) {\n  if (lowerText.includes(key)) {\n    if (!locations.includes(value)) {\n      locations.push(value);\n    }\n  }\n}\n\n// If no locations found, return error\nif (locations.length === 0) {\n  throw new Error('No locations found in voice command');\n}\n\nreturn [{\n  json: {\n    originalText: transcribedText,\n    locations: locations,\n    chatId: chatId,\n    searchQuery: {\n      countries: locations,\n      limit: 50\n    }\n  }\n}];"
      },
      "id": "e8a1b2c3-5f6d-7e8a-9f0b-1c2d3e4f5a6b",
      "name": "Extract Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apollo.io/v1/mixed_people/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"q_organization_locations\": {{JSON.stringify($json.locations)}},\n  \"page\": 1,\n  \"per_page\": 25,\n  \"person_titles\": [\"CEO\", \"CTO\", \"Manager\", \"Director\"]\n}",
        "options": {}
      },
      "id": "f9b2c3d4-6a7e-8f9b-0c1d-2e3f4a5b6c7d",
      "name": "Search Apollo Leads",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1450, 200],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Transform Apollo.io leads to our format\nconst apolloData = $input.first().json;\nconst leads = apolloData.people || [];\nconst voiceCommand = $node[\"Extract Intent\"].json.originalText;\nconst currentDate = new Date().toISOString();\n\n// If no leads found\nif (leads.length === 0) {\n  return [{\n    json: {\n      noLeadsFound: true,\n      stats: {\n        totalFound: 0,\n        uniqueLeads: 0,\n        duplicates: 0\n      }\n    }\n  }];\n}\n\nconst formattedLeads = leads.map(lead => {\n  return {\n    email: lead.email || '',\n    firstName: lead.first_name || '',\n    lastName: lead.last_name || '',\n    phone: lead.phone_numbers?.[0]?.sanitized_number || '',\n    company: lead.organization?.name || '',\n    jobTitle: lead.title || '',\n    source: 'Apollo.io - Voice Bot',\n    totalPurchases: '0',\n    lastPurchaseDate: '',\n    lifetimeValue: '0',\n    cartValue: '0',\n    productInterest: '',\n    websiteUrl: lead.organization?.website_url || '',\n    linkedinUrl: lead.linkedin_url || '',\n    city: lead.city || '',\n    state: lead.state || '',\n    zipCode: lead.postal_code || '',\n    country: lead.country || '',\n    leadType: 'Cold',\n    campaignName: `Voice Bot - ${currentDate.split('T')[0]}`,\n    preferredContact: 'Email',\n    newsletterOptIn: 'No',\n    smsOptIn: 'No',\n    tags: (lead.departments || []).join(', '),\n    notes: `Generated via voice command: \"${voiceCommand}\"`,\n    dateAdded: currentDate,\n    voiceCommandUsed: voiceCommand\n  };\n});\n\n// Store stats\n$node[\"Extract Intent\"].json.stats = {\n  totalFound: formattedLeads.length\n};\n\nreturn formattedLeads.map(lead => ({json: lead}));"
      },
      "id": "a0c3d4e5-7b8f-9a0c-1d2e-3f4a5b6c7d8e",
      "name": "Format Leads",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.noLeadsFound}}",
              "value2": true
            }
          ]
        }
      },
      "id": "b1d4e5f6-8c9a-0b1d-2e3f-4a5b6c7d8e9f",
      "name": "Check If Leads Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1850, 200]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads",
          "mode": "name"
        },
        "options": {}
      },
      "id": "c2e5f6a7-9d0b-1c2e-3f4a-5b6c7d8e9f0a",
      "name": "Read Existing Emails",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2050, 100]
    },
    {
      "parameters": {
        "jsCode": "// Check for duplicates\nconst existingData = $node[\"Read Existing Emails\"].json || [];\nconst existingEmails = new Set();\n\n// Extract existing emails\nif (Array.isArray(existingData)) {\n  existingData.forEach(row => {\n    if (row.email) {\n      existingEmails.add(row.email.toLowerCase());\n    }\n  });\n}\n\nconst newLeads = $input.all();\nconst uniqueLeads = [];\nconst duplicates = [];\n\nnewLeads.forEach(item => {\n  const lead = item.json;\n  if (lead.email && !existingEmails.has(lead.email.toLowerCase())) {\n    uniqueLeads.push(item);\n  } else if (lead.email) {\n    duplicates.push(item);\n  }\n});\n\n// Update stats\nconst stats = $node[\"Extract Intent\"].json.stats || {};\nstats.uniqueLeads = uniqueLeads.length;\nstats.duplicates = duplicates.length;\n$node[\"Extract Intent\"].json.stats = stats;\n\nif (uniqueLeads.length === 0) {\n  return [{\n    json: {\n      noNewLeads: true,\n      stats: stats\n    }\n  }];\n}\n\nreturn uniqueLeads;"
      },
      "id": "d3f6a7b8-0e1c-2d3e-4f5a-6b7c8d9e0f1b",
      "name": "Filter Duplicates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2250, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.noNewLeads}}",
              "value2": true
            }
          ]
        }
      },
      "id": "e4a7b8c9-1f2d-3e4f-5a6b-7c8d9e0f1c2d",
      "name": "Check New Leads",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2450, 200]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Leads",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Email": "={{$json.email}}",
            "First Name": "={{$json.firstName}}",
            "Last Name": "={{$json.lastName}}",
            "Phone": "={{$json.phone}}",
            "Company": "={{$json.company}}",
            "Job Title": "={{$json.jobTitle}}",
            "Source": "={{$json.source}}",
            "Total Purchases": "={{$json.totalPurchases}}",
            "Last Purchase Date": "={{$json.lastPurchaseDate}}",
            "Lifetime Value": "={{$json.lifetimeValue}}",
            "Cart Value": "={{$json.cartValue}}",
            "Product Interest": "={{$json.productInterest}}",
            "Website URL": "={{$json.websiteUrl}}",
            "LinkedIn URL": "={{$json.linkedinUrl}}",
            "City": "={{$json.city}}",
            "State": "={{$json.state}}",
            "Zip Code": "={{$json.zipCode}}",
            "Country": "={{$json.country}}",
            "Lead Type": "={{$json.leadType}}",
            "Campaign Name": "={{$json.campaignName}}",
            "Preferred Contact": "={{$json.preferredContact}}",
            "Newsletter Opt-In": "={{$json.newsletterOptIn}}",
            "SMS Opt-In": "={{$json.smsOptIn}}",
            "Tags": "={{$json.tags}}",
            "Notes": "={{$json.notes}}",
            "Date Added": "={{$json.dateAdded}}",
            "Voice Command Used": "={{$json.voiceCommandUsed}}"
          }
        },
        "options": {
          "valueInputMode": "USER_ENTERED"
        }
      },
      "id": "f5b8c9d0-2a3e-4f5a-6b7c-8d9e0f1c2d3e",
      "name": "Update Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2650, 100]
    },
    {
      "parameters": {
        "jsCode": "// Prepare success message\nconst stats = $node[\"Extract Intent\"].json.stats || {};\nconst chatId = $node[\"Extract Intent\"].json.chatId;\nconst locations = $node[\"Extract Intent\"].json.locations.join(', ');\nconst sheetUrl = 'https://
